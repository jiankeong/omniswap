/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface OmniPoolInterface extends utils.Interface {
  functions: {
    "FEE_RATE_BASE()": FunctionFragment;
    "baseToken()": FunctionFragment;
    "claim(uint256,uint256,uint256,bytes)": FunctionFragment;
    "otherToken()": FunctionFragment;
    "setStakeFactory(address)": FunctionFragment;
    "stakeFactory()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE_RATE_BASE"
      | "baseToken"
      | "claim"
      | "otherToken"
      | "setStakeFactory"
      | "stakeFactory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FEE_RATE_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "otherToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFactory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_RATE_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "otherToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStakeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeFactory",
    data: BytesLike
  ): Result;

  events: {
    "Claim(address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
}

export interface ClaimEventObject {
  user: string;
  token: string;
  amount: BigNumber;
  rType: BigNumber;
  timeout: BigNumber;
  time: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface OmniPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OmniPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_RATE_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    claim(
      _amount: PromiseOrValue<BigNumberish>,
      _rType: PromiseOrValue<BigNumberish>,
      _timeout: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    otherToken(overrides?: CallOverrides): Promise<[string]>;

    setStakeFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  FEE_RATE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  claim(
    _amount: PromiseOrValue<BigNumberish>,
    _rType: PromiseOrValue<BigNumberish>,
    _timeout: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  otherToken(overrides?: CallOverrides): Promise<string>;

  setStakeFactory(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    FEE_RATE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    claim(
      _amount: PromiseOrValue<BigNumberish>,
      _rType: PromiseOrValue<BigNumberish>,
      _timeout: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    otherToken(overrides?: CallOverrides): Promise<string>;

    setStakeFactory(
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Claim(address,address,uint256,uint256,uint256,uint256)"(
      user?: null,
      token?: null,
      amount?: null,
      rType?: null,
      timeout?: null,
      time?: null
    ): ClaimEventFilter;
    Claim(
      user?: null,
      token?: null,
      amount?: null,
      rType?: null,
      timeout?: null,
      time?: null
    ): ClaimEventFilter;
  };

  estimateGas: {
    FEE_RATE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _amount: PromiseOrValue<BigNumberish>,
      _rType: PromiseOrValue<BigNumberish>,
      _timeout: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    otherToken(overrides?: CallOverrides): Promise<BigNumber>;

    setStakeFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_RATE_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _amount: PromiseOrValue<BigNumberish>,
      _rType: PromiseOrValue<BigNumberish>,
      _timeout: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    otherToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setStakeFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
