/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface OmniStakePoolInterface extends utils.Interface {
  functions: {
    "DURATION()": FunctionFragment;
    "FEE_RATE_BASE()": FunctionFragment;
    "NPower(address,uint256)": FunctionFragment;
    "TPower(address,uint256)": FunctionFragment;
    "_getTokenPrice()": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "addLock(uint256)": FunctionFragment;
    "allAdmins()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseToken()": FunctionFragment;
    "batchStakePower(address[],uint256[])": FunctionFragment;
    "checkTime()": FunctionFragment;
    "commAddr2()": FunctionFragment;
    "commAddress()": FunctionFragment;
    "computeNextReleaseTime(uint256)": FunctionFragment;
    "dailyPower(address,uint256)": FunctionFragment;
    "dayId()": FunctionFragment;
    "dayPower()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "factory()": FunctionFragment;
    "flag()": FunctionFragment;
    "fundAddr2()": FunctionFragment;
    "fundAddress()": FunctionFragment;
    "getReward()": FunctionFragment;
    "hashPower(address)": FunctionFragment;
    "helpGetReward(address)": FunctionFragment;
    "initialize(address,address,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "initreward()": FunctionFragment;
    "isAdmin(address)": FunctionFragment;
    "lastTimeRewardApplicable()": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "lpAddress()": FunctionFragment;
    "lpReleaseTime()": FunctionFragment;
    "nextReleaseTime()": FunctionFragment;
    "operAddr()": FunctionFragment;
    "otherToken()": FunctionFragment;
    "period()": FunctionFragment;
    "periodFinish()": FunctionFragment;
    "relation()": FunctionFragment;
    "releaseBaseRatio()": FunctionFragment;
    "releaseCommRatio()": FunctionFragment;
    "releaseFundRatio()": FunctionFragment;
    "releaseOperRatio()": FunctionFragment;
    "releaseRatio()": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "removeLiqRelease()": FunctionFragment;
    "renounceAdmin()": FunctionFragment;
    "rewardClaimed(address)": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "rewardPerTokenStored()": FunctionFragment;
    "rewardPeriod()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "router()": FunctionFragment;
    "setFeeInfo(address,address,uint256,uint256,uint256)": FunctionFragment;
    "setFeeInfo2(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "setReleasePeriod(uint256)": FunctionFragment;
    "setRewardPeriod(uint256)": FunctionFragment;
    "setStartTime(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeCommRatio()": FunctionFragment;
    "stakeFactory()": FunctionFragment;
    "stakeFundRatio()": FunctionFragment;
    "stakeNodeRatio()": FunctionFragment;
    "stakePower(address,uint256)": FunctionFragment;
    "starttime()": FunctionFragment;
    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "takeInitLp()": FunctionFragment;
    "takeToken(address,address,uint256)": FunctionFragment;
    "totalHashPower()": FunctionFragment;
    "transferInitHolder(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePeriodFinish(uint256)": FunctionFragment;
    "updateStartTime(uint256)": FunctionFragment;
    "userRewardPerTokenPaid(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DURATION"
      | "FEE_RATE_BASE"
      | "NPower"
      | "TPower"
      | "_getTokenPrice"
      | "addAdmin"
      | "addLock"
      | "allAdmins"
      | "balanceOf"
      | "baseToken"
      | "batchStakePower"
      | "checkTime"
      | "commAddr2"
      | "commAddress"
      | "computeNextReleaseTime"
      | "dailyPower"
      | "dayId"
      | "dayPower"
      | "earned"
      | "factory"
      | "flag"
      | "fundAddr2"
      | "fundAddress"
      | "getReward"
      | "hashPower"
      | "helpGetReward"
      | "initialize"
      | "initreward"
      | "isAdmin"
      | "lastTimeRewardApplicable"
      | "lastUpdateTime"
      | "lpAddress"
      | "lpReleaseTime"
      | "nextReleaseTime"
      | "operAddr"
      | "otherToken"
      | "period"
      | "periodFinish"
      | "relation"
      | "releaseBaseRatio"
      | "releaseCommRatio"
      | "releaseFundRatio"
      | "releaseOperRatio"
      | "releaseRatio"
      | "removeAdmin"
      | "removeLiqRelease"
      | "renounceAdmin"
      | "rewardClaimed"
      | "rewardPerToken"
      | "rewardPerTokenStored"
      | "rewardPeriod"
      | "rewardRate"
      | "rewards"
      | "router"
      | "setFeeInfo"
      | "setFeeInfo2"
      | "setReleasePeriod"
      | "setRewardPeriod"
      | "setStartTime"
      | "stake"
      | "stakeCommRatio"
      | "stakeFactory"
      | "stakeFundRatio"
      | "stakeNodeRatio"
      | "stakePower"
      | "starttime"
      | "swapExactTokensForTokensSupportingFeeOnTransferTokens"
      | "takeInitLp"
      | "takeToken"
      | "totalHashPower"
      | "transferInitHolder"
      | "transferOwnership"
      | "updatePeriodFinish"
      | "updateStartTime"
      | "userRewardPerTokenPaid"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DURATION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "FEE_RATE_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NPower",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "TPower",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_getTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addLock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "allAdmins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchStakePower",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "checkTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "commAddr2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeNextReleaseTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyPower",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "dayId", values?: undefined): string;
  encodeFunctionData(functionFragment: "dayPower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "flag", values?: undefined): string;
  encodeFunctionData(functionFragment: "fundAddr2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hashPower",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "helpGetReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initreward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lpAddress", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lpReleaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextReleaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "otherToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "relation", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseBaseRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseCommRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFundRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseOperRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiqRelease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardClaimed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFeeInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeInfo2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setReleasePeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeCommRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFundRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeNodeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakePower",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "starttime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "takeInitLp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takeToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalHashPower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferInitHolder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePeriodFinish",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStartTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "DURATION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FEE_RATE_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NPower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TPower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allAdmins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchStakePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "checkTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commAddr2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeNextReleaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dailyPower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dayId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dayPower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundAddr2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashPower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "helpGetReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initreward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpReleaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextReleaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "otherToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseBaseRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseCommRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseFundRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseOperRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiqRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeInfo2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReleasePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeCommRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeFundRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeNodeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakePower", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "starttime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeInitLp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalHashPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferInitHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePeriodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;

  events: {
    "AdminAdded(address)": EventFragment;
    "AdminRemoved(address)": EventFragment;
    "Claim(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Release(uint256,uint256)": EventFragment;
    "RewardAdded(uint256)": EventFragment;
    "RewardPaid(address,uint256)": EventFragment;
    "Stake(address,uint256,uint256)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Release"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export interface AdminAddedEventObject {
  account: string;
}
export type AdminAddedEvent = TypedEvent<[string], AdminAddedEventObject>;

export type AdminAddedEventFilter = TypedEventFilter<AdminAddedEvent>;

export interface AdminRemovedEventObject {
  account: string;
}
export type AdminRemovedEvent = TypedEvent<[string], AdminRemovedEventObject>;

export type AdminRemovedEventFilter = TypedEventFilter<AdminRemovedEvent>;

export interface ClaimEventObject {
  user: string;
  token: string;
  amount: BigNumber;
  rType: BigNumber;
  timeout: BigNumber;
  time: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface ReleaseEventObject {
  amount: BigNumber;
  time: BigNumber;
}
export type ReleaseEvent = TypedEvent<
  [BigNumber, BigNumber],
  ReleaseEventObject
>;

export type ReleaseEventFilter = TypedEventFilter<ReleaseEvent>;

export interface RewardAddedEventObject {
  reward: BigNumber;
}
export type RewardAddedEvent = TypedEvent<[BigNumber], RewardAddedEventObject>;

export type RewardAddedEventFilter = TypedEventFilter<RewardAddedEvent>;

export interface RewardPaidEventObject {
  user: string;
  reward: BigNumber;
}
export type RewardPaidEvent = TypedEvent<
  [string, BigNumber],
  RewardPaidEventObject
>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface StakeEventObject {
  user: string;
  amount: BigNumber;
  time: BigNumber;
}
export type StakeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface StakedEventObject {
  user: string;
  amount: BigNumber;
}
export type StakedEvent = TypedEvent<[string, BigNumber], StakedEventObject>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface WithdrawnEventObject {
  user: string;
  amount: BigNumber;
}
export type WithdrawnEvent = TypedEvent<
  [string, BigNumber],
  WithdrawnEventObject
>;

export type WithdrawnEventFilter = TypedEventFilter<WithdrawnEvent>;

export interface OmniStakePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OmniStakePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    FEE_RATE_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    NPower(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    TPower(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _getTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLock(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allAdmins(
      overrides?: CallOverrides
    ): Promise<[string[]] & { admins: string[] }>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    batchStakePower(
      addrs: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    commAddr2(overrides?: CallOverrides): Promise<[string]>;

    commAddress(overrides?: CallOverrides): Promise<[string]>;

    computeNextReleaseTime(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dailyPower(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dayId(overrides?: CallOverrides): Promise<[BigNumber]>;

    dayPower(overrides?: CallOverrides): Promise<[BigNumber]>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    flag(overrides?: CallOverrides): Promise<[boolean]>;

    fundAddr2(overrides?: CallOverrides): Promise<[string]>;

    fundAddress(overrides?: CallOverrides): Promise<[string]>;

    getReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hashPower(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    helpGetReward(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _holder: PromiseOrValue<string>,
      _lpAddr: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initreward(overrides?: CallOverrides): Promise<[BigNumber]>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpAddress(overrides?: CallOverrides): Promise<[string]>;

    lpReleaseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextReleaseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    operAddr(overrides?: CallOverrides): Promise<[string]>;

    otherToken(overrides?: CallOverrides): Promise<[string]>;

    period(overrides?: CallOverrides): Promise<[BigNumber]>;

    periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    relation(overrides?: CallOverrides): Promise<[string]>;

    releaseBaseRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseCommRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseFundRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseOperRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiqRelease(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setFeeInfo(
      _fund: PromiseOrValue<string>,
      _community: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _nodeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeInfo2(
      _fund: PromiseOrValue<string>,
      _comm: PromiseOrValue<string>,
      _operate: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _operateFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReleasePeriod(
      _hour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardPeriod(
      _hour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStartTime(
      _start: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeCommRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeFactory(overrides?: CallOverrides): Promise<[string]>;

    stakeFundRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeNodeRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakePower(
      addr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    starttime(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeInitLp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalHashPower(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferInitHolder(
      _newHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePeriodFinish(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateStartTime(
      starttime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  FEE_RATE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  NPower(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  TPower(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  addAdmin(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLock(
    _time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allAdmins(overrides?: CallOverrides): Promise<string[]>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  batchStakePower(
    addrs: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkTime(overrides?: CallOverrides): Promise<BigNumber>;

  commAddr2(overrides?: CallOverrides): Promise<string>;

  commAddress(overrides?: CallOverrides): Promise<string>;

  computeNextReleaseTime(
    _time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dailyPower(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dayId(overrides?: CallOverrides): Promise<BigNumber>;

  dayPower(overrides?: CallOverrides): Promise<BigNumber>;

  earned(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  flag(overrides?: CallOverrides): Promise<boolean>;

  fundAddr2(overrides?: CallOverrides): Promise<string>;

  fundAddress(overrides?: CallOverrides): Promise<string>;

  getReward(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hashPower(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  helpGetReward(
    addr_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _holder: PromiseOrValue<string>,
    _lpAddr: PromiseOrValue<string>,
    _period: PromiseOrValue<BigNumberish>,
    _ref: PromiseOrValue<BigNumberish>,
    _limit: PromiseOrValue<BigNumberish>,
    _start: PromiseOrValue<BigNumberish>,
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initreward(overrides?: CallOverrides): Promise<BigNumber>;

  isAdmin(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  lpAddress(overrides?: CallOverrides): Promise<string>;

  lpReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

  nextReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

  operAddr(overrides?: CallOverrides): Promise<string>;

  otherToken(overrides?: CallOverrides): Promise<string>;

  period(overrides?: CallOverrides): Promise<BigNumber>;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  relation(overrides?: CallOverrides): Promise<string>;

  releaseBaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

  releaseCommRatio(overrides?: CallOverrides): Promise<BigNumber>;

  releaseFundRatio(overrides?: CallOverrides): Promise<BigNumber>;

  releaseOperRatio(overrides?: CallOverrides): Promise<BigNumber>;

  releaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

  removeAdmin(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiqRelease(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceAdmin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardClaimed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  setFeeInfo(
    _fund: PromiseOrValue<string>,
    _community: PromiseOrValue<string>,
    _fundFee: PromiseOrValue<BigNumberish>,
    _commFee: PromiseOrValue<BigNumberish>,
    _nodeFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeInfo2(
    _fund: PromiseOrValue<string>,
    _comm: PromiseOrValue<string>,
    _operate: PromiseOrValue<string>,
    _fundFee: PromiseOrValue<BigNumberish>,
    _commFee: PromiseOrValue<BigNumberish>,
    _operateFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReleasePeriod(
    _hour: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardPeriod(
    _hour: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStartTime(
    _start: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeCommRatio(overrides?: CallOverrides): Promise<BigNumber>;

  stakeFactory(overrides?: CallOverrides): Promise<string>;

  stakeFundRatio(overrides?: CallOverrides): Promise<BigNumber>;

  stakeNodeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  stakePower(
    addr: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  starttime(overrides?: CallOverrides): Promise<BigNumber>;

  swapExactTokensForTokensSupportingFeeOnTransferTokens(
    amountIn: PromiseOrValue<BigNumberish>,
    amountOutMin: PromiseOrValue<BigNumberish>,
    path: PromiseOrValue<string>[],
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeInitLp(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeToken(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalHashPower(overrides?: CallOverrides): Promise<BigNumber>;

  transferInitHolder(
    _newHolder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePeriodFinish(
    time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateStartTime(
    starttime_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userRewardPerTokenPaid(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_RATE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    NPower(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TPower(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addLock(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    allAdmins(overrides?: CallOverrides): Promise<string[]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    batchStakePower(
      addrs: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkTime(overrides?: CallOverrides): Promise<BigNumber>;

    commAddr2(overrides?: CallOverrides): Promise<string>;

    commAddress(overrides?: CallOverrides): Promise<string>;

    computeNextReleaseTime(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyPower(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dayId(overrides?: CallOverrides): Promise<BigNumber>;

    dayPower(overrides?: CallOverrides): Promise<BigNumber>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    flag(overrides?: CallOverrides): Promise<boolean>;

    fundAddr2(overrides?: CallOverrides): Promise<string>;

    fundAddress(overrides?: CallOverrides): Promise<string>;

    getReward(overrides?: CallOverrides): Promise<void>;

    hashPower(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    helpGetReward(
      addr_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _holder: PromiseOrValue<string>,
      _lpAddr: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initreward(overrides?: CallOverrides): Promise<BigNumber>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    lpAddress(overrides?: CallOverrides): Promise<string>;

    lpReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    nextReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    operAddr(overrides?: CallOverrides): Promise<string>;

    otherToken(overrides?: CallOverrides): Promise<string>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    relation(overrides?: CallOverrides): Promise<string>;

    releaseBaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseCommRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseFundRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseOperRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiqRelease(overrides?: CallOverrides): Promise<void>;

    renounceAdmin(overrides?: CallOverrides): Promise<void>;

    rewardClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    setFeeInfo(
      _fund: PromiseOrValue<string>,
      _community: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _nodeFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeInfo2(
      _fund: PromiseOrValue<string>,
      _comm: PromiseOrValue<string>,
      _operate: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _operateFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReleasePeriod(
      _hour: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardPeriod(
      _hour: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStartTime(
      _start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeCommRatio(overrides?: CallOverrides): Promise<BigNumber>;

    stakeFactory(overrides?: CallOverrides): Promise<string>;

    stakeFundRatio(overrides?: CallOverrides): Promise<BigNumber>;

    stakeNodeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    stakePower(
      addr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    starttime(overrides?: CallOverrides): Promise<BigNumber>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    takeInitLp(overrides?: CallOverrides): Promise<void>;

    takeToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalHashPower(overrides?: CallOverrides): Promise<BigNumber>;

    transferInitHolder(
      _newHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePeriodFinish(
      time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateStartTime(
      starttime_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AdminAdded(address)"(
      account?: PromiseOrValue<string> | null
    ): AdminAddedEventFilter;
    AdminAdded(account?: PromiseOrValue<string> | null): AdminAddedEventFilter;

    "AdminRemoved(address)"(
      account?: PromiseOrValue<string> | null
    ): AdminRemovedEventFilter;
    AdminRemoved(
      account?: PromiseOrValue<string> | null
    ): AdminRemovedEventFilter;

    "Claim(address,address,uint256,uint256,uint256,uint256)"(
      user?: null,
      token?: null,
      amount?: null,
      rType?: null,
      timeout?: null,
      time?: null
    ): ClaimEventFilter;
    Claim(
      user?: null,
      token?: null,
      amount?: null,
      rType?: null,
      timeout?: null,
      time?: null
    ): ClaimEventFilter;

    "Release(uint256,uint256)"(amount?: null, time?: null): ReleaseEventFilter;
    Release(amount?: null, time?: null): ReleaseEventFilter;

    "RewardAdded(uint256)"(reward?: null): RewardAddedEventFilter;
    RewardAdded(reward?: null): RewardAddedEventFilter;

    "RewardPaid(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      reward?: null
    ): RewardPaidEventFilter;
    RewardPaid(
      user?: PromiseOrValue<string> | null,
      reward?: null
    ): RewardPaidEventFilter;

    "Stake(address,uint256,uint256)"(
      user?: null,
      amount?: null,
      time?: null
    ): StakeEventFilter;
    Stake(user?: null, amount?: null, time?: null): StakeEventFilter;

    "Staked(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): StakedEventFilter;
    Staked(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): StakedEventFilter;

    "Withdrawn(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
    Withdrawn(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawnEventFilter;
  };

  estimateGas: {
    DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_RATE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    NPower(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TPower(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLock(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allAdmins(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    batchStakePower(
      addrs: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkTime(overrides?: CallOverrides): Promise<BigNumber>;

    commAddr2(overrides?: CallOverrides): Promise<BigNumber>;

    commAddress(overrides?: CallOverrides): Promise<BigNumber>;

    computeNextReleaseTime(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyPower(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dayId(overrides?: CallOverrides): Promise<BigNumber>;

    dayPower(overrides?: CallOverrides): Promise<BigNumber>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    flag(overrides?: CallOverrides): Promise<BigNumber>;

    fundAddr2(overrides?: CallOverrides): Promise<BigNumber>;

    fundAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hashPower(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    helpGetReward(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      _holder: PromiseOrValue<string>,
      _lpAddr: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initreward(overrides?: CallOverrides): Promise<BigNumber>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    lpAddress(overrides?: CallOverrides): Promise<BigNumber>;

    lpReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    nextReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    operAddr(overrides?: CallOverrides): Promise<BigNumber>;

    otherToken(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    relation(overrides?: CallOverrides): Promise<BigNumber>;

    releaseBaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseCommRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseFundRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseOperRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLiqRelease(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeInfo(
      _fund: PromiseOrValue<string>,
      _community: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _nodeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeInfo2(
      _fund: PromiseOrValue<string>,
      _comm: PromiseOrValue<string>,
      _operate: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _operateFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReleasePeriod(
      _hour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardPeriod(
      _hour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStartTime(
      _start: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeCommRatio(overrides?: CallOverrides): Promise<BigNumber>;

    stakeFactory(overrides?: CallOverrides): Promise<BigNumber>;

    stakeFundRatio(overrides?: CallOverrides): Promise<BigNumber>;

    stakeNodeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    stakePower(
      addr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    starttime(overrides?: CallOverrides): Promise<BigNumber>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeInitLp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalHashPower(overrides?: CallOverrides): Promise<BigNumber>;

    transferInitHolder(
      _newHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePeriodFinish(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateStartTime(
      starttime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_RATE_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NPower(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TPower(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _getTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLock(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allAdmins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchStakePower(
      addrs: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commAddr2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeNextReleaseTime(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyPower(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dayId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dayPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flag(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundAddr2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReward(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hashPower(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    helpGetReward(
      addr_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _holder: PromiseOrValue<string>,
      _lpAddr: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      _router: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initreward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpReleaseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextReleaseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    otherToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseBaseRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseCommRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseFundRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseOperRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiqRelease(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeInfo(
      _fund: PromiseOrValue<string>,
      _community: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _nodeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeInfo2(
      _fund: PromiseOrValue<string>,
      _comm: PromiseOrValue<string>,
      _operate: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _operateFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReleasePeriod(
      _hour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardPeriod(
      _hour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStartTime(
      _start: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeCommRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeFundRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeNodeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakePower(
      addr: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    starttime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMin: PromiseOrValue<BigNumberish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeInitLp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalHashPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferInitHolder(
      _newHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePeriodFinish(
      time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateStartTime(
      starttime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
