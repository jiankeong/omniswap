/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface OmniStakePoolInterface extends utils.Interface {
  functions: {
    "FEE_RATE_BASE()": FunctionFragment;
    "addLock(uint256)": FunctionFragment;
    "baseToken()": FunctionFragment;
    "claim(uint256,uint256,uint256,bytes)": FunctionFragment;
    "commAddr2()": FunctionFragment;
    "commAddress()": FunctionFragment;
    "computeNextReleaseTime(uint256)": FunctionFragment;
    "dailyRewardHour()": FunctionFragment;
    "factory()": FunctionFragment;
    "flag()": FunctionFragment;
    "fundAddr2()": FunctionFragment;
    "fundAddress()": FunctionFragment;
    "initialize(address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "lpAddress()": FunctionFragment;
    "lpReleaseTime()": FunctionFragment;
    "nextReleaseTime()": FunctionFragment;
    "operAddr()": FunctionFragment;
    "otherToken()": FunctionFragment;
    "period()": FunctionFragment;
    "releaseCommRatio()": FunctionFragment;
    "releaseFundRatio()": FunctionFragment;
    "releaseOperRatio()": FunctionFragment;
    "releaseRatio()": FunctionFragment;
    "removeLiqRelease()": FunctionFragment;
    "router()": FunctionFragment;
    "setDailyRewardHour(uint256)": FunctionFragment;
    "setFeeInfo(address,address,uint256,uint256,uint256)": FunctionFragment;
    "setFeeInfo2(address,address,address,uint256,uint256,uint256)": FunctionFragment;
    "setStartTime(uint256)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeCommRatio()": FunctionFragment;
    "stakeFactory()": FunctionFragment;
    "stakeFundRatio()": FunctionFragment;
    "stakeNodeRatio()": FunctionFragment;
    "starttime()": FunctionFragment;
    "takeInitLp()": FunctionFragment;
    "takeToken(address,address,uint256)": FunctionFragment;
    "transferInitHolder(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE_RATE_BASE"
      | "addLock"
      | "baseToken"
      | "claim"
      | "commAddr2"
      | "commAddress"
      | "computeNextReleaseTime"
      | "dailyRewardHour"
      | "factory"
      | "flag"
      | "fundAddr2"
      | "fundAddress"
      | "initialize"
      | "lpAddress"
      | "lpReleaseTime"
      | "nextReleaseTime"
      | "operAddr"
      | "otherToken"
      | "period"
      | "releaseCommRatio"
      | "releaseFundRatio"
      | "releaseOperRatio"
      | "releaseRatio"
      | "removeLiqRelease"
      | "router"
      | "setDailyRewardHour"
      | "setFeeInfo"
      | "setFeeInfo2"
      | "setStartTime"
      | "stake"
      | "stakeCommRatio"
      | "stakeFactory"
      | "stakeFundRatio"
      | "stakeNodeRatio"
      | "starttime"
      | "takeInitLp"
      | "takeToken"
      | "transferInitHolder"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FEE_RATE_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "commAddr2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeNextReleaseTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyRewardHour",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "flag", values?: undefined): string;
  encodeFunctionData(functionFragment: "fundAddr2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "lpAddress", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lpReleaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextReleaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "operAddr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "otherToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseCommRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFundRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseOperRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiqRelease",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDailyRewardHour",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeInfo2",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeCommRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFundRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeNodeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "starttime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "takeInitLp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takeToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferInitHolder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_RATE_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commAddr2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeNextReleaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dailyRewardHour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flag", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fundAddr2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lpReleaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextReleaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "otherToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseCommRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseFundRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseOperRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiqRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDailyRewardHour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeeInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeInfo2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeCommRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeFundRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeNodeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "starttime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeInitLp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferInitHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Claim(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Release(uint256,uint256)": EventFragment;
    "Stake(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Release"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
}

export interface ClaimEventObject {
  user: string;
  token: string;
  amount: BigNumber;
  rType: BigNumber;
  timeout: BigNumber;
  time: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface ReleaseEventObject {
  amount: BigNumber;
  time: BigNumber;
}
export type ReleaseEvent = TypedEvent<
  [BigNumber, BigNumber],
  ReleaseEventObject
>;

export type ReleaseEventFilter = TypedEventFilter<ReleaseEvent>;

export interface StakeEventObject {
  user: string;
  amount: BigNumber;
  time: BigNumber;
}
export type StakeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakeEventObject
>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface OmniStakePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OmniStakePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_RATE_BASE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLock(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    claim(
      _amount: PromiseOrValue<BigNumberish>,
      _rType: PromiseOrValue<BigNumberish>,
      _timeout: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commAddr2(overrides?: CallOverrides): Promise<[string]>;

    commAddress(overrides?: CallOverrides): Promise<[string]>;

    computeNextReleaseTime(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dailyRewardHour(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    flag(overrides?: CallOverrides): Promise<[boolean]>;

    fundAddr2(overrides?: CallOverrides): Promise<[string]>;

    fundAddress(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _holder: PromiseOrValue<string>,
      _lpAddr: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lpAddress(overrides?: CallOverrides): Promise<[string]>;

    lpReleaseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextReleaseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    operAddr(overrides?: CallOverrides): Promise<[string]>;

    otherToken(overrides?: CallOverrides): Promise<[string]>;

    period(overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseCommRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseFundRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseOperRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    releaseRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeLiqRelease(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setDailyRewardHour(
      _hour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeInfo(
      _fund: PromiseOrValue<string>,
      _community: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _nodeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeInfo2(
      _fund: PromiseOrValue<string>,
      _comm: PromiseOrValue<string>,
      _operate: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _operateFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStartTime(
      _start: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeCommRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeFactory(overrides?: CallOverrides): Promise<[string]>;

    stakeFundRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    stakeNodeRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    starttime(overrides?: CallOverrides): Promise<[BigNumber]>;

    takeInitLp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferInitHolder(
      _newHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  FEE_RATE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  addLock(
    _time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  claim(
    _amount: PromiseOrValue<BigNumberish>,
    _rType: PromiseOrValue<BigNumberish>,
    _timeout: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commAddr2(overrides?: CallOverrides): Promise<string>;

  commAddress(overrides?: CallOverrides): Promise<string>;

  computeNextReleaseTime(
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dailyRewardHour(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  flag(overrides?: CallOverrides): Promise<boolean>;

  fundAddr2(overrides?: CallOverrides): Promise<string>;

  fundAddress(overrides?: CallOverrides): Promise<string>;

  initialize(
    _holder: PromiseOrValue<string>,
    _lpAddr: PromiseOrValue<string>,
    _period: PromiseOrValue<BigNumberish>,
    _ref: PromiseOrValue<BigNumberish>,
    _limit: PromiseOrValue<BigNumberish>,
    _start: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lpAddress(overrides?: CallOverrides): Promise<string>;

  lpReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

  nextReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

  operAddr(overrides?: CallOverrides): Promise<string>;

  otherToken(overrides?: CallOverrides): Promise<string>;

  period(overrides?: CallOverrides): Promise<BigNumber>;

  releaseCommRatio(overrides?: CallOverrides): Promise<BigNumber>;

  releaseFundRatio(overrides?: CallOverrides): Promise<BigNumber>;

  releaseOperRatio(overrides?: CallOverrides): Promise<BigNumber>;

  releaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

  removeLiqRelease(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setDailyRewardHour(
    _hour: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeInfo(
    _fund: PromiseOrValue<string>,
    _community: PromiseOrValue<string>,
    _fundFee: PromiseOrValue<BigNumberish>,
    _commFee: PromiseOrValue<BigNumberish>,
    _nodeFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeInfo2(
    _fund: PromiseOrValue<string>,
    _comm: PromiseOrValue<string>,
    _operate: PromiseOrValue<string>,
    _fundFee: PromiseOrValue<BigNumberish>,
    _commFee: PromiseOrValue<BigNumberish>,
    _operateFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStartTime(
    _start: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeCommRatio(overrides?: CallOverrides): Promise<BigNumber>;

  stakeFactory(overrides?: CallOverrides): Promise<string>;

  stakeFundRatio(overrides?: CallOverrides): Promise<BigNumber>;

  stakeNodeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  starttime(overrides?: CallOverrides): Promise<BigNumber>;

  takeInitLp(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeToken(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferInitHolder(
    _newHolder: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE_RATE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    addLock(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    claim(
      _amount: PromiseOrValue<BigNumberish>,
      _rType: PromiseOrValue<BigNumberish>,
      _timeout: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    commAddr2(overrides?: CallOverrides): Promise<string>;

    commAddress(overrides?: CallOverrides): Promise<string>;

    computeNextReleaseTime(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyRewardHour(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    flag(overrides?: CallOverrides): Promise<boolean>;

    fundAddr2(overrides?: CallOverrides): Promise<string>;

    fundAddress(overrides?: CallOverrides): Promise<string>;

    initialize(
      _holder: PromiseOrValue<string>,
      _lpAddr: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lpAddress(overrides?: CallOverrides): Promise<string>;

    lpReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    nextReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    operAddr(overrides?: CallOverrides): Promise<string>;

    otherToken(overrides?: CallOverrides): Promise<string>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    releaseCommRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseFundRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseOperRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiqRelease(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setDailyRewardHour(
      _hour: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeInfo(
      _fund: PromiseOrValue<string>,
      _community: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _nodeFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeInfo2(
      _fund: PromiseOrValue<string>,
      _comm: PromiseOrValue<string>,
      _operate: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _operateFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStartTime(
      _start: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeCommRatio(overrides?: CallOverrides): Promise<BigNumber>;

    stakeFactory(overrides?: CallOverrides): Promise<string>;

    stakeFundRatio(overrides?: CallOverrides): Promise<BigNumber>;

    stakeNodeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    starttime(overrides?: CallOverrides): Promise<BigNumber>;

    takeInitLp(overrides?: CallOverrides): Promise<void>;

    takeToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferInitHolder(
      _newHolder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Claim(address,address,uint256,uint256,uint256,uint256)"(
      user?: null,
      token?: null,
      amount?: null,
      rType?: null,
      timeout?: null,
      time?: null
    ): ClaimEventFilter;
    Claim(
      user?: null,
      token?: null,
      amount?: null,
      rType?: null,
      timeout?: null,
      time?: null
    ): ClaimEventFilter;

    "Release(uint256,uint256)"(amount?: null, time?: null): ReleaseEventFilter;
    Release(amount?: null, time?: null): ReleaseEventFilter;

    "Stake(address,uint256,uint256)"(
      user?: null,
      amount?: null,
      time?: null
    ): StakeEventFilter;
    Stake(user?: null, amount?: null, time?: null): StakeEventFilter;
  };

  estimateGas: {
    FEE_RATE_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    addLock(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      _amount: PromiseOrValue<BigNumberish>,
      _rType: PromiseOrValue<BigNumberish>,
      _timeout: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commAddr2(overrides?: CallOverrides): Promise<BigNumber>;

    commAddress(overrides?: CallOverrides): Promise<BigNumber>;

    computeNextReleaseTime(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyRewardHour(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    flag(overrides?: CallOverrides): Promise<BigNumber>;

    fundAddr2(overrides?: CallOverrides): Promise<BigNumber>;

    fundAddress(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _holder: PromiseOrValue<string>,
      _lpAddr: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lpAddress(overrides?: CallOverrides): Promise<BigNumber>;

    lpReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    nextReleaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    operAddr(overrides?: CallOverrides): Promise<BigNumber>;

    otherToken(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    releaseCommRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseFundRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseOperRatio(overrides?: CallOverrides): Promise<BigNumber>;

    releaseRatio(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiqRelease(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setDailyRewardHour(
      _hour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeInfo(
      _fund: PromiseOrValue<string>,
      _community: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _nodeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeInfo2(
      _fund: PromiseOrValue<string>,
      _comm: PromiseOrValue<string>,
      _operate: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _operateFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStartTime(
      _start: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeCommRatio(overrides?: CallOverrides): Promise<BigNumber>;

    stakeFactory(overrides?: CallOverrides): Promise<BigNumber>;

    stakeFundRatio(overrides?: CallOverrides): Promise<BigNumber>;

    stakeNodeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    starttime(overrides?: CallOverrides): Promise<BigNumber>;

    takeInitLp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferInitHolder(
      _newHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_RATE_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLock(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      _amount: PromiseOrValue<BigNumberish>,
      _rType: PromiseOrValue<BigNumberish>,
      _timeout: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commAddr2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeNextReleaseTime(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyRewardHour(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flag(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundAddr2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _holder: PromiseOrValue<string>,
      _lpAddr: PromiseOrValue<string>,
      _period: PromiseOrValue<BigNumberish>,
      _ref: PromiseOrValue<BigNumberish>,
      _limit: PromiseOrValue<BigNumberish>,
      _start: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lpAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpReleaseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextReleaseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    otherToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseCommRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseFundRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseOperRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releaseRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiqRelease(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDailyRewardHour(
      _hour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeInfo(
      _fund: PromiseOrValue<string>,
      _community: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _nodeFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeInfo2(
      _fund: PromiseOrValue<string>,
      _comm: PromiseOrValue<string>,
      _operate: PromiseOrValue<string>,
      _fundFee: PromiseOrValue<BigNumberish>,
      _commFee: PromiseOrValue<BigNumberish>,
      _operateFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStartTime(
      _start: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeCommRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeFundRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeNodeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    starttime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeInitLp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeToken(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferInitHolder(
      _newHolder: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
